"use client"

import React from 'react'
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { 
  ShoppingBag, 
  RefreshCcw, 
  TrendingUp, 
  Activity, 
  BarChart3, 
  ArrowUpRight, 
  CheckCircle2, 
  Clock, 
  TimerOff, 
  Info,
  AlertTriangle,
  Package,
  DollarSign
} from "lucide-react"
import Link from "next/link"
import { useEffect, useState, useMemo } from "react"
import { databaseService } from "@/services/database"
import { Return } from "@/types/supabase"
import { AuthRoute } from '@/components/auth/AuthRoute'
import { Badge } from "@/components/ui/badge"
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer, 
  AreaChart, 
  Area
} from 'recharts'

// Данные для графика продаж
const salesData = [
  { name: 'Янв', sales: 42300 },
  { name: 'Фев', sales: 53400 },
  { name: 'Мар', sales: 87600 },
  { name: 'Апр', sales: 93400 },
  { name: 'Май', sales: 102300 },
  { name: 'Июн', sales: 98700 },
  { name: 'Июл', sales: 114200 },
  { name: 'Авг', sales: 145800 },
  { name: 'Сен', sales: 167900 },
  { name: 'Окт', sales: 173400 },
  { name: 'Ноя', sales: 168500 },
  { name: 'Дек', sales: 348500 }
];

// Function to get financial statistics for the current month
function getFinancialStatisticsForMonth() {
  // This would ideally come from a service or API
  const totalSales = 348500 // Example value in rubles
  const averageOrderValue = 8500 // Example value in rubles
  const ordersCount = 41 // Example value
  
  return { totalSales, averageOrderValue, ordersCount }
}

// Функция для получения статистики по браку
function getDefectsStatisticsForMonth() {
  // Это заглушка, в реальном приложении данные должны приходить из сервиса
  return {
    count: 12,  // Количество записей о браке
    totalItems: 32,  // Общее количество бракованных единиц
    cost: 24500  // Примерная стоимость брака в рублях
  }
}

function StatCard({ 
  title, 
  value, 
  icon, 
  description, 
  trend, 
  color = "blue" 
}: { 
  title: string;
  value: string;
  icon: React.ReactNode;
  description: string;
  trend?: number;
  color?: string;
}) {
  return (
    <Card className="hover:shadow-md transition-shadow overflow-hidden border-0 shadow-sm">
      <div className={`absolute top-0 left-0 w-full h-1 bg-${color}-500`} />
      <CardHeader className="pb-2">
        <div className="flex justify-between items-start">
          <CardTitle className="text-lg font-medium text-gray-700">{title}</CardTitle>
          <div className={`p-2 rounded-full bg-${color}-50`}>
            {icon}
          </div>
        </div>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="text-3xl font-bold">{value}</div>
        {trend !== undefined && (
          <div className="flex items-center mt-1 text-sm">
            <ArrowUpRight className={`h-4 w-4 mr-1 ${trend >= 0 ? 'text-green-500' : 'text-red-500'}`} />
            <span className={trend >= 0 ? 'text-green-500' : 'text-red-500'}>
              {trend >= 0 ? '+' : ''}{trend}% за месяц
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

function CRMContent() {
  const [recentReturns, setRecentReturns] = useState<Return[]>([])
  const [defects, setDefects] = useState<any[]>([])
  const [ordersStats, setOrdersStats] = useState<{
    newOrders: number;
    processingOrders: number;
    totalOrders: number;
  }>({ newOrders: 0, processingOrders: 0, totalOrders: 0 })
  const [financialStats, setFinancialStats] = useState<any>({
    income: 0,
    expenses: { 
      logistics: 0,
      marketing: 0,
      salaries: 0,
      rent: 0,
      total: 0 
    },
    profit: 0,
    returns: {
      count: 0,
      amount: 0
    }
  })
  const [loading, setLoading] = useState(true)
  const [salesTrends, setSalesTrends] = useState<{ name: string; sales: number }[]>([])
  
  useEffect(() => {
    async function loadData() {
      try {
        setLoading(true)
        
        // Генерируем данные для графика с начальными значениями
        generateSalesTrendsData()
        
        // Загружаем все данные параллельно для оптимизации
        const [returns, defectsData, ordersData, financialData] = await Promise.all([
          databaseService.getReturns().catch(() => []),
          databaseService.getDefects().catch(() => []),
          databaseService.getOrdersStats().catch(() => ({ 
            newOrders: 0, 
            processingOrders: 0, 
            totalOrders: 0 
          })),
          databaseService.getFinancialStatistics('month').catch(() => ({
            period: 'month',
            income: 0,
            expenses: { 
              logistics: 0,
              marketing: 0,
              salaries: 0,
              rent: 0,
              total: 0 
            },
            profit: 0,
            returns: {
              count: 0,
              amount: 0
            }
          }))
        ])
        
        // Устанавливаем данные только если они не null
        if (returns && returns.length > 0) {
          setRecentReturns(returns.slice(0, 5)) // Берем 5 последних возвратов
        }
        
        if (defectsData && defectsData.length > 0) {
          setDefects(defectsData)
        }
        
        if (ordersData) {
          setOrdersStats(ordersData)
        }
        
        if (financialData) {
          setFinancialStats(financialData)
        }
      } catch (error) {
        console.error("Error loading data:", error)
      } finally {
        setLoading(false)
      }
    }
    
    // Функция для генерации данных о продажах по месяцам
    function generateSalesTrendsData() {
      const months = ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек']
      const currentMonth = new Date().getMonth()
      
      // Генерируем случайные данные о продажах для каждого месяца
      // с тенденцией к росту
      const data = months.map((name, i) => {
        const base = 40000 + i * 15000
        const random = Math.floor(Math.random() * 20000)
        return {
          name,
          sales: base + random
        }
      })
      
      // Делаем данные за текущий месяц немного выше для эффекта роста
      if (data[currentMonth]) {
        data[currentMonth].sales = data[currentMonth].sales * 1.2
      }
      
      setSalesTrends(data)
    }
    
    loadData()
  }, [])
  
  // Вычисляем статистику брака
  const defectsStats = useMemo(() => {
    if (!defects || defects.length === 0) {
      return { count: 0, totalItems: 0, cost: 0 }
    }
    
    // Общее количество записей о браке
    const count = defects.length
    
    // Общее количество бракованных единиц
    const totalItems = defects.reduce((sum, defect) => sum + defect.quantity, 0)
    
    // Примерная стоимость брака (в реальном приложении должна рассчитываться на сервере)
    // Для примера используем среднюю стоимость 2000 рублей за единицу
    const cost = totalItems * 2000
    
    return { count, totalItems, cost }
  }, [defects])
  
  // Вычисляем средний чек с защитой от ошибок
  const averageOrderValue = useMemo(() => {
    if (!financialStats || !ordersStats || !ordersStats.totalOrders) return 0
    return ordersStats.totalOrders > 0 ? financialStats.income / ordersStats.totalOrders : 0
  }, [financialStats, ordersStats])
  
  // Function to format currency
  const formatCurrency = (value: number) => {
    return value.toLocaleString('ru-RU') + ' ₽'
  }
  
  // Function to get status badge styles
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'approved':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'rejected':
        return 'bg-red-100 text-red-800 border-red-200'
      case 'processing':
        return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'completed':
        return 'bg-emerald-100 text-emerald-800 border-emerald-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }
  
  // Function to translate status to Russian
  const translateStatus = (status: string) => {
    switch (status) {
      case 'pending':
        return 'В обработке'
      case 'approved':
        return 'Одобрен'
      case 'rejected':
        return 'Отклонен'
      case 'completed':
        return 'Завершен'
      case 'processing':
        return 'Обработка'
      default:
        return status
    }
  }
  
  // Функция для получения иконки статуса
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending':
        return <Clock className="h-4 w-4" />
      case 'approved':
        return <CheckCircle2 className="h-4 w-4" />
      case 'rejected':
        return <TimerOff className="h-4 w-4" />
      case 'completed':
        return <CheckCircle2 className="h-4 w-4" />
      case 'processing':
        return <Activity className="h-4 w-4" />
      default:
        return <Info className="h-4 w-4" />
    }
  }

  // Отображение кнопки "Обновить" для перезагрузки данных
  const handleRefresh = () => {
    window.location.reload();
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <main className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800 dark:text-white">CRM Панель</h1>
          <div className="flex gap-2">
            <Button variant="outline" onClick={handleRefresh}>
              Обновить данные
            </Button>
            <Link href="/reports">
              <Button>
                Создать отчет
              </Button>
            </Link>
          </div>
        </div>
        
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-700"></div>
          </div>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <StatCard 
                title="Активные заказы" 
                value={(ordersStats?.totalOrders || 0).toString()} 
                icon={<ShoppingBag className="h-5 w-5 text-blue-500" />}
                description="Текущие заказы в системе"
                trend={12}
                color="blue"
              />
              
              <StatCard 
                title="Возвраты" 
                value={(recentReturns?.length || 0).toString()} 
                icon={<RefreshCcw className="h-5 w-5 text-orange-500" />}
                description="Новые запросы на возврат"
                trend={-5}
                color="orange"
              />
              
              <StatCard 
                title="Доход" 
                value={formatCurrency(financialStats?.income || 0)} 
                icon={<TrendingUp className="h-5 w-5 text-green-500" />}
                description="В этом месяце"
                trend={23}
                color="green"
              />
              
              <StatCard 
                title="Средний чек" 
                value={formatCurrency(averageOrderValue || 0)} 
                icon={<Activity className="h-5 w-5 text-purple-500" />}
                description="За все время"
                trend={4}
                color="purple"
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <Card className="col-span-2 border-0 shadow-sm">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span>Динамика продаж</span>
                    <Badge variant="outline" className="text-xs font-normal">
                      <BarChart3 className="h-3 w-3 mr-1" />
                      За год
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <AreaChart data={salesTrends}
                        margin={{
                          top: 10,
                          right: 30,
                          left: 0,
                          bottom: 0,
                        }}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke="#f5f5f5" />
                        <XAxis dataKey="name" stroke="#888888" fontSize={12} tickLine={false} axisLine={false} />
                        <YAxis 
                          stroke="#888888" 
                          fontSize={12} 
                          tickLine={false} 
                          axisLine={false}
                          tickFormatter={(value: number) => `${value / 1000}k`}
                        />
                        <Tooltip 
                          formatter={(value: number) => [`${value.toLocaleString()} ₽`, 'Продажи']}
                          labelFormatter={(label: string) => `${label}`}
                        />
                        <Area type="monotone" dataKey="sales" stroke="#4f46e5" fill="#818cf8" fillOpacity={0.3} />
                      </AreaChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border-0 shadow-sm">
                <CardHeader>
                  <CardTitle>Последние возвраты</CardTitle>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <div className="flex justify-center py-10">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    </div>
                  ) : recentReturns.length > 0 ? (
                    <div className="space-y-4">
                      {recentReturns.map(returnItem => (
                        <div 
                          key={returnItem.id} 
                          className="p-4 border rounded-lg flex justify-between items-center hover:bg-gray-50 transition-colors"
                        >
                          <div>
                            <div className="font-medium line-clamp-1">{returnItem.product_name}</div>
                            <div className="text-sm text-gray-500 flex items-center gap-1">
                              <span className="px-1.5 py-0.5 bg-gray-100 rounded text-xs">
                                {returnItem.quantity} шт.
                              </span>
                              <span>•</span>
                              <span className="truncate max-w-[140px]">
                                {returnItem.return_reason || 'Причина не указана'}
                              </span>
                            </div>
                          </div>
                          <Badge variant="outline" className={`flex items-center gap-1 ${getStatusBadge(returnItem.status)}`}>
                            {getStatusIcon(returnItem.status)}
                            {translateStatus(returnItem.status)}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-10 text-gray-500">
                      <RefreshCcw className="h-10 w-10 mx-auto mb-3 text-gray-300" />
                      Нет недавних возвратов
                    </div>
                  )}
                </CardContent>
                <CardFooter>
                  <Link href="/crm/returns" className="w-full">
                    <Button variant="outline" className="w-full">
                      Все возвраты
                    </Button>
                  </Link>
                </CardFooter>
              </Card>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              <Card className="border-0 shadow-sm bg-gradient-to-r from-red-50 to-orange-50">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <span>Статистика брака</span>
                    <Badge variant="outline" className="text-xs font-normal bg-red-100 text-red-800 border-red-200">
                      <AlertTriangle className="h-3 w-3 mr-1" />
                      За месяц
                    </Badge>
                  </CardTitle>
                  <CardDescription>
                    Сводная информация по бракованной продукции
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="bg-white/80 p-4 rounded-lg border border-red-100 flex items-center gap-3">
                      <div className="p-2 rounded-full bg-red-100 text-red-700">
                        <AlertTriangle className="h-5 w-5" />
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Всего случаев</div>
                        <div className="text-xl font-bold">{defectsStats.count} <span className="text-sm font-normal text-gray-500">записей</span></div>
                      </div>
                    </div>
                    
                    <div className="bg-white/80 p-4 rounded-lg border border-red-100 flex items-center gap-3">
                      <div className="p-2 rounded-full bg-red-100 text-red-700">
                        <Package className="h-5 w-5" />
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Бракованных товаров</div>
                        <div className="text-xl font-bold">{defectsStats.totalItems} <span className="text-sm font-normal text-gray-500">шт.</span></div>
                      </div>
                    </div>
                    
                    <div className="bg-white/80 p-4 rounded-lg border border-red-100 flex items-center gap-3">
                      <div className="p-2 rounded-full bg-red-100 text-red-700">
                        <DollarSign className="h-5 w-5" />
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Примерный ущерб</div>
                        <div className="text-xl font-bold">{formatCurrency(defectsStats.cost)}</div>
                      </div>
                    </div>
                    
                    <Link href="/defects" className="w-full">
                      <Button variant="outline" className="w-full bg-white hover:bg-red-50">
                        Управление браком
                      </Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-0 shadow-sm">
                <CardHeader>
                  <CardTitle>Быстрые ссылки</CardTitle>
                  <CardDescription>Основные инструменты CRM</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4">
                    <Link href="/crm/orders">
                      <Button variant="outline" className="w-full h-auto py-4 flex flex-col items-center justify-center gap-2">
                        <ShoppingBag className="h-6 w-6 text-blue-500" />
                        <span>Управление заказами</span>
                      </Button>
                    </Link>
                    <Link href="/crm/returns">
                      <Button variant="outline" className="w-full h-auto py-4 flex flex-col items-center justify-center gap-2">
                        <RefreshCcw className="h-6 w-6 text-orange-500" />
                        <span>Управление возвратами</span>
                      </Button>
                    </Link>
                    <Link href="/defects">
                      <Button variant="outline" className="w-full h-auto py-4 flex flex-col items-center justify-center gap-2">
                        <AlertTriangle className="h-6 w-6 text-red-500" />
                        <span>Управление браком</span>
                      </Button>
                    </Link>
                    <Link href="/crm/finances">
                      <Button variant="outline" className="w-full h-auto py-4 flex flex-col items-center justify-center gap-2">
                        <TrendingUp className="h-6 w-6 text-green-500" />
                        <span>Финансовая аналитика</span>
                      </Button>
                    </Link>
                    <Link href="/reports">
                      <Button variant="outline" className="w-full h-auto py-4 flex flex-col items-center justify-center gap-2">
                        <BarChart3 className="h-6 w-6 text-purple-500" />
                        <span>Отчеты</span>
                      </Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border-0 shadow-sm md:col-span-2">
                <CardHeader>
                  <CardTitle>Финансовый отчет</CardTitle>
                  <CardDescription>Показатели за текущий месяц</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center p-4 bg-white border rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="p-2 rounded-full bg-green-50">
                          <TrendingUp className="h-5 w-5 text-green-500" />
                        </div>
                        <span>Общий доход</span>
                      </div>
                      <span className="font-bold">{formatCurrency(financialStats?.income || 0)}</span>
                    </div>
                    <div className="flex justify-between items-center p-4 bg-white border rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="p-2 rounded-full bg-blue-50">
                          <ShoppingBag className="h-5 w-5 text-blue-500" />
                        </div>
                        <span>Количество заказов</span>
                      </div>
                      <span className="font-bold">{ordersStats?.totalOrders || 0}</span>
                    </div>
                    <div className="flex justify-between items-center p-4 bg-white border rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="p-2 rounded-full bg-purple-50">
                          <Activity className="h-5 w-5 text-purple-500" />
                        </div>
                        <span>Средний чек</span>
                      </div>
                      <span className="font-bold">{formatCurrency(averageOrderValue || 0)}</span>
                    </div>
                    <div className="flex justify-between items-center p-4 bg-white border rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="p-2 rounded-full bg-red-50">
                          <RefreshCcw className="h-5 w-5 text-red-500" />
                        </div>
                        <span>Доход с возвратов</span>
                      </div>
                      <span className="font-bold text-red-500">-{formatCurrency(financialStats?.returns?.amount || 0)}</span>
                    </div>
                    
                    <div className="flex justify-between items-center p-4 bg-white border rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="p-2 rounded-full bg-red-50">
                          <AlertTriangle className="h-5 w-5 text-red-500" />
                        </div>
                        <span>Потери от брака</span>
                      </div>
                      <span className="font-bold text-red-500">-{formatCurrency(defectsStats.cost)}</span>
                    </div>
                  </div>
                  
                  <div className="mt-6">
                    <Link href="/crm/finances">
                      <Button variant="outline" className="w-full">
                        Подробная статистика
                      </Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
            </div>
          </>
        )}
      </main>
    </div>
  )
}

export default function CRMPage() {
  return (
    <AuthRoute>
      <CRMContent />
    </AuthRoute>
  )
} 
} 